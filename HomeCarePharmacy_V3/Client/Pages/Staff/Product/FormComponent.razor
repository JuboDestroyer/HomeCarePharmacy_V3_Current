




<EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
    <div class="form-group">
        <label>Name: </label>
        <div>
            <InputText @bind-Value="@product.Name" class="form-control" />
            <ValidationMessage For="@(() => product.Name)" />
        </div>
    </div>
    </fieldset>

    <fieldset disabled="@Disabled">
    <div class="form-group">
        <label>Description: </label>
        <div>
            <InputText @bind-Value="@product.Description" class="form-control" />
            <ValidationMessage For="@(() => product.Description)" />
        </div>
    </div>
    </fieldset>

    <fieldset disabled="@Disabled">
    <div class="form-group">
        <label>Price: </label>
        <div>
            <InputNumber @bind-Value="@product.Price" class="form-control" />
            <ValidationMessage For="@(() => product.Price)" />
        </div>
    </div>
    </fieldset>


    <fieldset disabled="@Disabled">
    <div class="form-group">
        <label>Quantity: </label>
        <div>
            <InputNumber @bind-Value="@product.Quantity" class="form-control" />
            <ValidationMessage For="@(() => product.Quantity)" />
        </div>
    </div>
    </fieldset>

    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>

    <br />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Product? product { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback<Product> OnValidSubmit { get; set; }

    private async Task HandleValidSubmit()
    {
        // Invoke the callback with the updated product
        await OnValidSubmit.InvokeAsync(product);
    }
}
